# zlib/png integration hack - removes all the errors related to export
# (zlib doesn't export; libpng wants to; in this case we don't care).
set(SKIP_INSTALL_EXPORT TRUE)

# If this is built standalone, and not part of an embedded project,
# define the build directory.
string(COMPARE EQUAL ${CMAKE_CURRENT_SOURCE_DIR} ${CMAKE_SOURCE_DIR} IS_ROOT_PROJECT)

if(IS_ROOT_PROJECT)
    if(NOT DEFINED DEPS_INSTALL_PREFIX)
        set(DEPS_INSTALL_PREFIX "${CMAKE_BINARY_DIR}/build" CACHE STRING "Installation Prefix" FORCE)
    endif()

    get_property(
        CMAKE_INSTALL_PREFIX_DOCS
        DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}
        PROPERTY CMAKE_INSTALL_PREFIX
        FULL_DOCS
    )

    set(CMAKE_INSTALL_PREFIX ${DEPS_INSTALL_PREFIX} CACHE STRING "${CMAKE_INSTALL_PREFIX_DOCS}" FORCE)

    set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY ${CMAKE_INSTALL_PREFIX}/bin)
    set(CMAKE_LIBRARY_OUTPUT_DIRECTORY ${CMAKE_INSTALL_PREFIX}/bin)
    set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CMAKE_INSTALL_PREFIX}/bin)
    set(CMAKE_PDB_OUTPUT_DIRECTORY ${CMAKE_INSTALL_PREFIX}/bin)
endif()

# zlib (requires nothing)
set(ZLIB_DIRECTORY "${CMAKE_CURRENT_SOURCE_DIR}/zlib")
add_subdirectory(${ZLIB_DIRECTORY})

get_directory_property(ZLIB_BUILD_DIRECTORY 
  DIRECTORY ${ZLIB_DIRECTORY} 
  DEFINITION CMAKE_CURRENT_BINARY_DIR)

option(PNG_LINK_ZLIB_STATIC "Use a static zlib library for libpng builds" ON)

# not needed, but paranoia for the future.
get_directory_property(zlib 
  DIRECTORY ${ZLIB_DIRECTORY} 
  DEFINITION zlib)

# not needed, but paranoia for the future.
get_directory_property(zlibstatic 
  DIRECTORY ${ZLIB_DIRECTORY} 
  DEFINITION zlibstatic)

if(PNG_LINK_ZLIB_STATIC)
    set(ZLIB_LIBRARY zlibstatic)
else()
    set(ZLIB_LIBRARY zlib)
endif()
set(ZLIB_INCLUDE_DIR ${ZLIB_DIRECTORY})

# ======================================
# libpng (requiring zlib)
set(LIBPNG_DIRECTORY "${CMAKE_CURRENT_SOURCE_DIR}/libpng")

# libpng needs a hand.
include_directories(
  ${ZLIB_DIRECTORY} ${ZLIB_BUILD_DIRECTORY} 
  ${LIBPNG_DIRECTORY} ${LIBPNG_BUILD_DIRECTORY}
  )

add_subdirectory(${LIBPNG_DIRECTORY})

get_directory_property(LIBPNG_BUILD_DIRECTORY 
  DIRECTORY ${LIBPNG_DIRECTORY} 
  DEFINITION CMAKE_CURRENT_BINARY_DIR)

get_directory_property(LIBPNG_STATIC 
  DIRECTORY ${LIBPNG_DIRECTORY} 
  DEFINITION PNG_LIB_NAME_STATIC)

get_directory_property(LIBPNG_SHARED 
  DIRECTORY ${LIBPNG_DIRECTORY} 
  DEFINITION PNG_LIB_NAME)

# ========================
# openjpeg
set(OPENJPEG_DIRECTORY "${CMAKE_CURRENT_SOURCE_DIR}/openjpeg")
add_subdirectory(${OPENJPEG_DIRECTORY})
get_directory_property(OPENJPEG_BUILD_DIRECTORY
  DIRECTORY ${OPENJPEG_DIRECTORY}
  DEFINITION CMAKE_CURRENT_BINARY_DIR
)
get_directory_property(OPENJPEG_STATIC 
  DIRECTORY ${OPENJPEG_DIRECTORY}
  DEFINITION OPENJPEG_LIB_NAME_STATIC
)
get_directory_property(OPENJPEG_SHARED 
  DIRECTORY ${OPENJPEG_DIRECTORY}
  DEFINITION OPENJPEG_LIB_NAME
)

# ===================
# libde265
set(LIBDE265_DIRECTORY "${CMAKE_CURRENT_SOURCE_DIR}/libde265")
add_subdirectory(${LIBDE265_DIRECTORY})
get_directory_property(LIBDE265_BUILD_DIRECTORY
  DIRECTORY ${LIBDE265_DIRECTORY}
  DEFINITION CMAKE_CURRENT_BINARY_DIR
)
get_directory_property(LIBDE265_STATIC 
  DIRECTORY ${LIBDE265_DIRECTORY}
  DEFINITION LIBDE265_LIB_NAME_STATIC
)
get_directory_property(LIBDE265_SHARED 
DIRECTORY ${LIBDE265_DIRECTORY}
DEFINITION LIBDE265_LIB_NAME
)


# ===================
# jasper
set(JASPER_DIRECTORY "${CMAKE_CURRENT_SOURCE_DIR}/jasper")
set(ALLOW_IN_SOURCE_BUILD 1)
add_compile_definitions(JAS_STDC_VERSION=11)
add_subdirectory(${JASPER_DIRECTORY})

get_directory_property(JASPER_BUILD_DIRECTORY
  DIRECTORY ${JASPER_DIRECTORY}
  DEFINITION CMAKE_CURRENT_BINARY_DIR
)
get_directory_property(JASPER_STATIC 
  DIRECTORY ${JASPER_DIRECTORY}
  DEFINITION JASPER_LIB_NAME_STATIC
)
get_directory_property(JASPER_SHARED 
  DIRECTORY ${JASPER_DIRECTORY}
  DEFINITION JASPER_LIB_NAME
)

# ===================
# libtiff
set(LIBTIFF_DIRECTORY "${CMAKE_CURRENT_SOURCE_DIR}/libtiff")
add_subdirectory(${LIBTIFF_DIRECTORY})
get_directory_property(LIBTIFF_BUILD_DIRECTORY
  DIRECTORY ${LIBTIFF_DIRECTORY}
  DEFINITION CMAKE_CURRENT_BINARY_DIR
)
get_directory_property(LIBTIFF_STATIC 
  DIRECTORY ${LIBTIFF_DIRECTORY}
  DEFINITION LIBTIFF_LIB_NAME_STATIC
)
get_directory_property(LIBTIFF_SHARED 
  DIRECTORY ${LIBTIFF_DIRECTORY}
  DEFINITION LIBTIFF_LIB_NAME
)

# ===================
# libwebp
set(LIBWEBP_DIRECTORY "${CMAKE_CURRENT_SOURCE_DIR}/libwebp")
add_subdirectory(${LIBWEBP_DIRECTORY})
set(WEBP_LINK_STATIC ON)
get_directory_property(LIBWEBP_BUILD_DIRECTORY
  DIRECTORY ${LIBWEBP_DIRECTORY}
  DEFINITION CMAKE_CURRENT_BINARY_DIR
)
get_directory_property(LIBWEBP_STATIC 
  DIRECTORY ${LIBWEBP_DIRECTORY}
  DEFINITION LIBWEBP_LIB_NAME_STATIC
)
get_directory_property(LIBWEBP_SHARED 
  DIRECTORY ${LIBWEBP_DIRECTORY}
  DEFINITION LIBWEBP_LIB_NAME
)

# Conditionally exported values
if(NOT IS_ROOT_PROJECT)
    set(ZLIB_DIRECTORY            ${ZLIB_DIRECTORY}         PARENT_SCOPE)
    set(ZLIB_BUILD_DIRECTORY      ${ZLIB_BUILD_DIRECTORY}   PARENT_SCOPE)
    set(ZLIB_STATIC               zlibstatic                PARENT_SCOPE)
    set(ZLIB_SHARED               zlib                      PARENT_SCOPE)

    set(LIBPNG_DIRECTORY          ${LIBPNG_DIRECTORY}         PARENT_SCOPE)
    set(LIBPNG_BUILD_DIRECTORY    ${LIBPNG_BUILD_DIRECTORY}   PARENT_SCOPE)
    set(LIBPNG_STATIC             ${LIBPNG_STATIC}            PARENT_SCOPE)
    set(LIBPNG_SHARED             ${LIBPNG_SHARED}            PARENT_SCOPE)

    set(OPENJPEG_DIRECTORY        ${OPENJPEG_DIRECTORY}       PARENT_SCOPE)
    set(OPENJPEG_BUILD_DIRECTORY  ${OPENJPEG_BUILD_DIRECTORY} PARENT_SCOPE)
    set(OPENJPEG_STATIC           ${OPENJPEG_STATIC}          PARENT_SCOPE)
    set(OPENJPEG_SHARED           ${OPENJPEG_SHARED}          PARENT_SCOPE)

    set(LIBDE265_DIRECTORY        ${LIBDE265_DIRECTORY}       PARENT_SCOPE)
    set(LIBDE265_BUILD_DIRECTORY  ${LIBDE265_BUILD_DIRECTORY} PARENT_SCOPE)
    set(LIBDE265_STATIC           ${LIBDE265_STATIC}          PARENT_SCOPE)
    set(LIBDE265_SHARED           ${LIBDE265_SHARED}          PARENT_SCOPE)

    set(JASPER_DIRECTORY        ${JASPER_DIRECTORY}       PARENT_SCOPE)
    set(JASPER_BUILD_DIRECTORY  ${JASPER_BUILD_DIRECTORY} PARENT_SCOPE)
    set(JASPER_STATIC           ${JASPER_STATIC}          PARENT_SCOPE)
    set(JASPER_SHARED           ${JASPER_SHARED}          PARENT_SCOPE)

    set(LIBTIFF_DIRECTORY        ${LIBTIFF_DIRECTORY}       PARENT_SCOPE)
    set(LIBTIFF_BUILD_DIRECTORY  ${LIBTIFF_BUILD_DIRECTORY} PARENT_SCOPE)
    set(LIBTIFF_STATIC           ${LIBTIFF_STATIC}          PARENT_SCOPE)
    set(LIBTIFF_SHARED           ${LIBTIFF_SHARED}          PARENT_SCOPE)

    set(LIBWEBP_DIRECTORY        ${LIBWEBP_DIRECTORY}       PARENT_SCOPE)
    set(LIBWEBP_BUILD_DIRECTORY  ${LIBWEBP_BUILD_DIRECTORY} PARENT_SCOPE)
    set(LIBWEBP_STATIC           ${LIBWEBP_STATIC}          PARENT_SCOPE)
    set(LIBWEBP_SHARED           ${LIBWEBP_SHARED}          PARENT_SCOPE)

    # Setup the dependencies include directories, sending it upward for use.
    if(NOT DEFINED DEPS_INCLUDE_DIRECTORIES)
        set(DEPS_INCLUDE_DIRECTORIES ${ZLIB_DIRECTORY} ${ZLIB_BUILD_DIRECTORY} 
          ${LIBPNG_DIRECTORY} ${LIBPNG_BUILD_DIRECTORY} 
          ${OPENJPEG_DIRECTORY} ${OPENJPEG_BUILD_DIRECTORY} 
          ${LIBDE265_DIRECTORY} ${LIBDE265_BUILD_DIRECTORY} 
          ${JASPER_DIRECTORY} ${JASPER_BUILD_DIRECTORY} 
          ${LIBTIFF_DIRECTORY} ${LIBTIFF_BUILD_DIRECTORY} 
          ${LIBWEBP_DIRECTORY} ${LIBWEBP_BUILD_DIRECTORY} 
          PARENT_SCOPE
        )
    else()
        # Already defined requires append semantics
        list(APPEND DEPS_INCLUDE_DIRECTORIES 
          ${ZLIB_DIRECTORY} ${ZLIB_BUILD_DIRECTORY} 
          ${LIBPNG_DIRECTORY} ${LIBPNG_BUILD_DIRECTORY}
          ${OPENJPEG_DIRECTORY} ${OPENJPEG_BUILD_DIRECTORY} 
          ${LIBDE265_DIRECTORY} ${LIBDE265_BUILD_DIRECTORY} 
          ${JASPER_DIRECTORY} ${JASPER_BUILD_DIRECTORY} 
          ${LIBTIFF_DIRECTORY} ${LIBTIFF_BUILD_DIRECTORY} 
          ${LIBWEBP_DIRECTORY} ${LIBWEBP_BUILD_DIRECTORY} 
        )
    endif()
endif()
